mode: train # (train / eval)
logger:
  level: 20 # CRITICAL = 50, ERROR = 40, WARNING = 30, INFO = 20, DEBUG = 10, NOTSET = 0
  format: "%(asctime)s - %(levelname)s - %(module)s - %(message)s"
experiment_path: ./experiments/results
test_policy: true # whether to test / apply the policy after training or not

# define gym environment that will be injected to the agent
gym_environment:
  enable_render: false # whether to render the policy application or not
  window_size: 30
  scale_reward: 1
  data:
    train_path: ./experiments/data/minmax/train.csv
    test_path: ./experiments/data/minmax/test.csv
    attributes: [ "time", "open", "close", "low", "high" ]

# define the rl agent (using the above gym environment)
agent:
  episodes: 100
  log_interval: 5
  sb_logger: ["stdout", "csv", "tensorboard"] # format options are: "stdout", "csv", "log", "tensorboard", "json"

  # define model with its specific parameters
  model:
    name: A2C # compare https://stable-baselines3.readthedocs.io/en/master/modules/a2c.html
    pretrained_path: # empty if start from scratch TODO implement
    policy: MlpPolicy
    device: auto # (cuda / cpu / auto)
    verbose: 1 # 0 none, 1 training information, 2 debug
    learning_rate: 0.0007
    gamma: 0.99
    seed: null
    n_steps: 5
    gae_lambda: 1.0
    ent_coef: 0.0
    vf_coef: 0.5
    rms_prop_eps: 0.00001 # 1e-05
    use_rms_prop: true
    normalize_advantage: false
    predict_deterministic: true # only for testing